/**
 * _printf - Format and print data to the standard output.
 * @format: A pointer to a null-terminated format string.
 *
 * Description:
 * This function formats and prints data to the standard output based on the
 * format specifier provided in the format string. It supports various format
 * specifiers for different data types and custom conversion specifiers.
 *
 * Return:
 * The function returns the number of characters printed.
 * In case of an error, it returns -1.
 *
 * Format Specifiers:
 *   - %c: Character specifier. Prints a single character.
 *   - %s: String specifier. Prints a null-terminated string.
 *   - %d or %i: Integer specifier. Prints a signed integer.
 *   - %u: Unsigned Integer specifier. Prints an unsigned integer.
 *   - %o: Octal specifier. Prints an unsigned integer in octal format.
 *   - %x or %X: Hexadecimal specifier. Prints an unsigned integer in hexadecimal format.
 *   - %p: Pointer specifier. Prints a pointer's memory address in hexadecimal.
 *   - %b: Binary specifier. Prints an unsigned integer in binary format.
 *   - %r: Reverse string specifier. Prints a string in reverse order.
 *   - %%: Literal '%' specifier. Prints a '%' character.
 *
 * Note:
 *   - This function does not handle flag characters.
 *   - It does not handle field width.
 *   - Precision is not supported.
 *   - Length modifiers are not handled.
 *
 * Example:
 *   int count = _printf("Hello, %s! You have %d apples.\n", "Alice", 42);
 *   // Output: "Hello, Alice! You have 42 apples."
 *
 *   char binary[] = "101010";
 *   count = _printf("Binary: %b\n", 42);
 *   // Output: "Binary: 101010"
 *
 *   char str[] = "Hello";
 *   count = _printf("Reversed: %r\n", str);
 *   // Output: "Reversed: olleH"
 *
 *   void *ptr = NULL;
 *   count = _printf("Pointer Address: %p\n", ptr);
 *   // Output: "Pointer Address: 0x0"
 * Authors:
 * - Manar Mansour, Aya Salam
 */

int _printf(const char *format, ...);
